#!/bin/bash

function usage()
{
    echo "Usage: $0 -a <ASSEMBLY> -b1 <ILUALIGNMENT> -b2 <PBALIGNMENT> -t <TARGETS> -p <PREFIX>"
    printf "\n"
    echo "  -a | --assembly_file             PacBio assembly in Fasta format (REQUIRED)."
    echo " -b1 | --illumina_alignment_file   input illumina alignment in BAM (sorted) format (REQUIRED)."
    echo " -b2 | --pacbio_alignment_file     input pacbio alignment in BAM (sorted) format (REQUIRED)."
    echo "  -p | --prefix                    Prefix for output files (default: standard)"
    echo "  -t | --targets_file              Target file generated by correction.sh (REQUIRED)."
    echo "  -h | --help                      Display help."
    echo "  -c | --citation                  Display citation."
}

function citation()
{
  echo "Thank you for using ARAMIS. Please, cite:"
  echo ""
  echo "E Sacristán-Horcajada, S González-de la Fuente, R Peiró-Pastor, F Carrasco-Ramiro, R Amils, J M Requena, J Berenguer, B Aguado, ARAMIS: From systematic errors of NGS long reads to accurate assemblies, Briefings in Bioinformatics, 2021;, bbab170, https://doi.org/10.1093/bib/bbab170"
  echo ""
}

ASSEMBLY=''
ILUALIGNMENT=''
PBALIGNMENT=''
TARGETS=''
PREFIX='standard'


# display usage if 
	if [[ $# -lt 4 && $1 != "-h" && $1 != "--help" && $1 != "-c" && $1 != "--citation" ]]; then
	    echo "ERROR: You must provide the assembly, alignment files and targets file (generated by correction.sh)."
	    usage
	    exit 2
	fi

while [[ "$1" > 0 ]]; do
  case $1 in
    -a| --assembly_file)
      shift
      ASSEMBLY=$1
      shift
      ;;
    -b1| --illumina_alignment_file)
      shift
      ILUALIGNMENT=$1
      shift
      ;;
    -b2| --pacbio_alignment_file)
      shift
      PBALIGNMENT=$1
      shift
      ;;
    -t| --targets_file)
      shift
      TARGETS=$1
      shift
      ;;
    -p| --prefix)
      shift
      PREFIX=$1
      shift
      ;; 
    -h| --help)
      usage
      exit
      ;;
    -c| --citation)
      citation
      exit
      ;;
    *)
      echo "ERROR: Missing parameter!!!"
      exit
      ;;
  esac
done

echo $ASSEMBLY
echo $ILUALIGNMENT
echo $PBALIGNMENT
echo $TARGETS

# Clear links
function clear_links()
{
# Get link name from full path
assembly_link=$(basename $ASSEMBLY)
illumina_link=$(basename $ILUALIGNMENT)
pacbio_link=$(basename $PBALIGNMENT)
target_link=$(basename $TARGETS)
# Clean links
links=($assembly_link $illumina_link $pacbio_link $target_link)
  for lnk in ${links[@]}
  do
    if [ -h "$lnk" ]
    then
      unlink $lnk
    fi
  done
}

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
  printf "\nExecution halted by user.\n"
  clear_links
  exit
}

# Get ARAMIS path
ARAMIS_PATH=$(/usr/bin/dirname $(/usr/bin/realpath $0))

# Check software dependencies
software=(gc_skew.py fasta.py)
for pckg in ${software[@]}
do 
  if [[ ! -f "${ARAMIS_PATH}/dependencies/${pckg}" ]]
  then
    printf "\nERROR: dependencies missing (${pckg}).\n"
    exit
  elif [[ ${pckg} == 'gc_skew.py' ]]
  then
     GCSKEW_PATH="${ARAMIS_PATH}/dependencies/${pckg}"
  fi
done

# Check Samtools
type samtools 2> /dev/null 1>&2 
if [ $? != 0 ]
then
  printf "\nERROR: samtools missing. Install the required dependencies. We recommend installing a conda environment.\n"
  exit
else
  SAMTOOLS=$(type -p samtools)
fi

# Check IGVTools
type igvtools 2> /dev/null 1>&2 
if [ $? != 0 ]
then
  printf "\nERROR: igvtools missing. Install the required dependencies. We recommend downloadinf the full IGV package and the location to the path.\n"
  exit
else
  IGVTOOLS=$(type -p igvtools)
fi

printf "\n"
echo "- The file $ASSEMBLY will be used as the reference assembly.
- The $ILUALIGNMENT will be used as Illumina alignment file.
- The $PBALIGNMENT will be used as Pacbio alignment file.
- You selected the file $TARGETS generated by correction.sh"

printf "\n"
echo "Let's start calculating coverage !! (This could take a while)"

mkdir indel_information &>/dev/null
cd indel_information/

ln -s ../$ASSEMBLY &>/dev/null
ln -s ../$ILUALIGNMENT &>/dev/null
ln -s ../$PBALIGNMENT &>/dev/null
ln -s ../$TARGETS &>/dev/null

##LET'S START CALCULATING COVERAGE

$SAMTOOLS index $ILUALIGNMENT
$SAMTOOLS index $PBALIGNMENT 

$IGVTOOLS count -w 1 --bases --minMapQuality 1 $ILUALIGNMENT ${PREFIX}_Illumina_coverage.wig $ASSEMBLY &>/dev/null

	if [[ $? != 0 ]]; then 
		echo "ERROR TRYING TO EXECUTE IGVTOOLS: Illumina coverage!!"
		exit 1
	fi 

$IGVTOOLS count -w 1 --bases --minMapQuality 1 $PBALIGNMENT ${PREFIX}_PacBio_coverage.wig $ASSEMBLY &>/dev/null

	if [[ $? != 0 ]]; then 
		echo "ERROR TRYING TO EXECUTE IGVTOOLS: PacBio coverage!!"
		exit 1
	fi 

printf "\n"
echo "Coverage calculation DONE !!"

#NOW DETECT ALL HOMOPOLYMERS IN THE ASSEMBLY 

#Motifs.fa: Fasta file with the motifs to search: homopolymers with at least 3 G/C/T/A

printf "\n"
echo "Finding homopolymers tracks !!"

echo -e '>Cs\nC{2,}\n\n>Gs\nG{2,}\n\n>As\nA{2,}\n\n>Ts\nT{2,}\n' > motifs.fa

seqkit locate -P -r -f motifs.fa $ASSEMBLY | sort -n -k 5 | awk 'BEGIN{FS=OFS="\t"}{print $1,$5,$6,$4,$2,$7,$6-$5+1}' > ${PREFIX}_homopolymers.txt

printf "\n"
echo "All homopolymers detected !!"


#CONTINUE CALCULATING GC SKEW

printf "\n"
echo "Let's calculate GC-SKEW !!"

python3 $GCSKEW_PATH -f $ASSEMBLY -s 1000 -w 1000 --no-plot > ${PREFIX}_gc_skew.txt  

	if [[ $? != 0 ]]; then 
		echo "ERROR TRYING TO EXECUTE GC SKEW CALCULATOR !!"
		exit 1
	fi 

printf "\n"
echo "GC-SKEW calculated !!"


#COMBINING ALL INFORMATION

printf "\n"
echo "Let's combine all information and generate some plots !!"

echo -e "Indels\t$TARGETS\nIllumina_coverage\t${PREFIX}_Illumina_coverage.wig\nPacBio_coverage\t${PREFIX}_PacBio_coverage.wig\nHomopolymers_file\t${PREFIX}_homopolymers.txt\nGCSkew_file\t${PREFIX}_gc_skew.txt" > list

$SAMTOOLS faidx $ASSEMBLY
cut -f1-2 ${ASSEMBLY}.fai > list_chro

python3 ${ARAMIS_PATH}/combine_info.py list ${PREFIX}_allinfo.txt

	if [[ $? != 0 ]]; then 
		echo "ERROR TRYING TO EXECUTE A PYTHON3 SCRIPT !!"
		exit 1
	fi 

Rscript --vanilla ${ARAMIS_PATH}/plot_generation.R -f ${PREFIX}_allinfo.txt -l list_chro -c tempcoverage.txt -g ${PREFIX}_gc_skew.txt

	if [[ $? != 0 ]]; then 
		echo "ERROR TRYING TO EXECUTE A R SCRIPT !!"
		exit 1
	fi 

# Remove temporal files and links
rm tempcoverage.txt list_chro list motifs.fa
clear_links

printf "\n"
echo "ALL DONE. Now check the results !!"


echo "                            /   |
 _                        )      ((   ))     (
(@)                      /||      ))_((     /||
|-|                     / | |    (/||/|)   / | |                      (@)
| | -------------------/--|-voV---|'|'/--Vov-|--|---------------------|-|
|-|                         '^'   (o o)  '^'                          | |
| |                               '|Y/'                               |-|
|-|                                                                   | |
| |                         That's all folks!!!                       |-|
|-|                                                                   | |
| |  Eva Sacristán Horcajada                                          |-|
| |            Sandra González de la Fuente                           | |
|-|                         Ramón Peiró Pastor                        |-|
|_|___________________________________________________________________| |
(@)              l   /| /         ( (       | /|   l                '||-|
                 l /   V           | |       V   | l                  (@)
                 l/                _) )_          |I
                                   '| /'
"






